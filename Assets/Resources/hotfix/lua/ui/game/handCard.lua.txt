require "ui/game/handCardBtn"

HandCard = {}
HandCard.__index = HandCard

function HandCard:New(gameObject, dealCard, informationCard)
	local item = {}
	item.gameObject = gameObject
	item.transform = gameObject.transform
	item.ui = {}
	item.dealCard = dealCard
	item.informationCard = informationCard

	setmetatable(item, HandCard)
	return item
end

function HandCard:InitUIReference()
	self.ui.cards = {}
	for i = 1, 12 do
		self.ui.cards[i] = {}
		self.ui.cards[i].transform = self.transform:Find("CardList/Card"..i)
		self.ui.cards[i].gameObject = self.ui.cards[i].transform.gameObject
		self.ui.cards[i].btn = self.ui.cards[i].transform:GetComponent(typeof(Button))
		self.ui.cards[i].image = self.ui.cards[i].transform:Find("Card"):GetComponent(typeof(Image))
		self.ui.cards[i].bigerBtn = self.ui.cards[i].transform:Find("BigerBtn"):GetComponent(typeof(Button))
		self.ui.cards[i].highLight = self.ui.cards[i].transform:Find("HighLight")
	end
	self.ui.cardsWidth = self.ui.cards[1].transform:GetComponent(typeof(RectTransform)).rect.width
	self.ui.myInformationCard = {}
	self.ui.myInformationCard.transform = self.transform:Find("MyInformationCard")
	self.ui.myInformationCard.image = self.transform:Find("MyInformationCard/Card"):GetComponent(typeof(Image))
	self.ui.myInformationCard.btn = self.transform:Find("MyInformationCard/Card"):GetComponent(typeof(Button))
	
	self.ui.btnList = HandCardBtn:New(self.transform:Find("BtnList").gameObject, self)
	self.ui.btnList:InitUIReference()
end

function HandCard:InitUI()
	for i = 1, 12 do
		self.ui.cards[i].btn.interactable = true
		self.ui.cards[i].gameObject:SetActive(false)
		self.ui.cards[i].image.sprite = ResourcesManager:LoadSprite(Global.Resources.Card.None)
		self.ui.cards[i].bigerBtn.gameObject:SetActive(false)
		self.ui.cards[i].highLight.gameObject:SetActive(false)
	end
	self.handCards = {}
	self.chooseCards = {}
	self.myInformationCard = nil
	self.ui.myInformationCard.transform.gameObject:SetActive(false)
	self:SetCardListGroup()
	self.ui.btnList:InitUI()
end

function HandCard:OnBtnHandCard(index)
	local activeSelf = self.ui.cards[index].highLight.gameObject.activeSelf
	--已选中点击：取消
	if activeSelf == true then
		self.ui.cards[index].highLight.gameObject:SetActive(false)
		self.chooseCards[index] = nil
	--未选中点击：选中
	else
		self.ui.cards[index].highLight.gameObject:SetActive(true)
		self.chooseCards[index] = self.handCards[index]
	end
end

function HandCard:OnBtnHandCardBiger(index)
	local data = {}
	data.path = Global.Resources.Card[self.handCards[index].cardName]
	EventManager:TriggerEvent(Global.Event.DetailCard, data)
end

function HandCard:OnMyInformationCard()
	if self.myInformationCard ~= nil then
		local data = {}
		data.path = Global.Resources.Card[self.myInformationCard.cardName]
		EventManager:TriggerEvent(Global.Event.DetailCard, data)
	end
end

function HandCard:AddUIEvent()
	self.ui.btnList:AddUIEvent()
	for i = 1, 12 do
		local index = i
		UIEventManager:AddListener(self.ui.cards[i].btn, function() self:OnBtnHandCard(index) end, "lua.game.handCard.OnBtnHandCard")
		UIEventManager:AddListener(self.ui.cards[i].bigerBtn, function() self:OnBtnHandCardBiger(index) end, "lua.game.handCard.OnBtnHandCardBiger")
	end
	UIEventManager:AddListener(self.ui.myInformationCard.btn, self.OnMyInformationCard, self, "lua.game.handCard.OnMyInformationCard")
end

function HandCard:RemoveUIEvent()
	self.ui.btnList:RemoveUIEvent()
	for i = 1, 12 do
		UIEventManager:RemoveAllListeners(self.ui.cards[i].btn)
		UIEventManager:RemoveAllListeners(self.ui.cards[i].bigerBtn)
	end
	UIEventManager:RemoveAllListeners(self.ui.myInformationCard.btn)
end

function HandCard:OnDealCardsStart(data)
	local handCardCount = #self.handCards
	for i = 1, #data.dealCards do
		if data.dealCards[i].userName == Global.Data.User.UserName then
			for j = 1, #data.dealCards[i].cards do
				table.insert(self.handCards, data.dealCards[i].cards[j])
			end
			break
		end
	end
	
	local newHandCardCount = #self.handCards
	if handCardCount >= newHandCardCount then return end
	
	self:SetCardListGroup()
	
	for i = handCardCount + 1, newHandCardCount do
		local card = self.ui.cards[i]
		self.ui.cards[i].image.sprite = ResourcesManager:LoadSprite(Global.Resources.Card[self.handCards[i].cardName])
		self.dealCard:AddDealCard(self.ui.cards[i].transform.position, self.handCards[i].cardName, function()
			card.gameObject:SetActive(true)
			card.bigerBtn.gameObject:SetActive(true)
		end)
	end
	
end
	
function HandCard:SetCardListGroup()
	local spacing = 0
	local handCardCount = #self.handCards
	local startLocalPosition = self.ui.cards[1].transform.localPosition
	if handCardCount <= 6 then
		spacing = 15
	elseif handCardCount == 7 then
		spacing = -7
	elseif handCardCount == 8 then
		spacing = -22
	elseif handCardCount == 9 then
		spacing = -34
	elseif handCardCount == 10 then
		spacing = -43
	elseif handCardCount == 11 then
		spacing = -50
	else
		spacing = -56
	end
	for i = 2, 12 do
		local localPosition = self.ui.cards[i].transform.localPosition
		localPosition.x = startLocalPosition.x + ((self.ui.cardsWidth + spacing) * (i - 1))
		self.ui.cards[i].transform.localPosition = localPosition
	end
end

function HandCard:OnGameComplete()
	self:InitUI()
end

function HandCard:OnGameTurnDisCardStart(data)
	if data.userName == Global.Data.User.UserName and #data.cards > 0 then
		local isEvent = false
		for key, value in pairs(data.indexs) do
			self.ui.cards[value].gameObject:SetActive(false)
			local startPos = self.ui.cards[value].transform.position
			if isEvent == false then
				isEvent = true
				self.dealCard:DisOneCard(startPos, Global.Resources.Card[self.handCards[value].cardName], 0, function()
						EventManager:TriggerEvent(Global.Event.GameStage.GameTurnDisCardComplete, nil)
					end)
			else
				self.dealCard:DisOneCard(startPos, Global.Resources.Card[self.handCards[value].cardName], 0, nil)
			end
			self.handCards[value] = nil
		end
		for i = 1, 12 do
			self.ui.cards[i].highLight.gameObject:SetActive(false)
		end
		self.chooseCards = {}
	end
end

function HandCard:ArrangeHandCard()
	if #self.handCards > 0 then
		local j = 1
		local handCards = {}
		for i = 1, 12 do
			while j <= 12 and self.handCards[j] == nil do
				j = j + 1
			end
			if j <= 12 then
				handCards[i] = self.handCards[j]
				self.ui.cards[i].gameObject:SetActive(true)
				self.ui.cards[i].image.sprite = ResourcesManager:LoadSprite(Global.Resources.Card[handCards[i].cardName])
				self.ui.cards[i].bigerBtn.gameObject:SetActive(true)
				self.ui.cards[i].highLight.gameObject:SetActive(false)
				j = j + 1
			else
				self.ui.cards[i].gameObject:SetActive(false)
				self.ui.cards[i].image.sprite = ResourcesManager:LoadSprite(Global.Resources.Card.None)
				self.ui.cards[i].bigerBtn.gameObject:SetActive(false)
				self.ui.cards[i].highLight.gameObject:SetActive(false)
			end
		end
		self.handCards = handCards
		self:SetCardListGroup()
	end
end

function HandCard:OnGameTurnDisCardComplete()
	self:ArrangeHandCard()
end

function HandCard:OnInformationTransmitReady(data)
	if Global.Data.User.UserName == data.fromUserName then
		self.ui.cards[data.handCardIndex].transform.gameObject:SetActive(false)
		local startPos = self.ui.cards[data.handCardIndex].transform.position
		self.myInformationCard = data.card
		self.informationCard:InformationDeclarationStart(startPos, data, true, function()
				self.ui.myInformationCard.transform.gameObject:SetActive(true)
				self.ui.myInformationCard.image.sprite = ResourcesManager:LoadSprite(Global.Resources.Card[data.card.cardName])
				self:ArrangeHandCard()
			end)
		self.handCards[data.handCardIndex] = nil
	end
end

function HandCard:OnInformationReceiveSuccess()
	if Global.Data.User.UserName == Global.Data.RoomInfo.CurrentGameTurnUserName then
		self.chooseCards = {}
		for i = 1, 12 do
			self.ui.cards[i].highLight.gameObject:SetActive(false)
		end
	end
end

function HandCard:OnGameTurnOpertateEnd(data)
	if Global.Data.User.UserName == data.userName then
		self.ui.myInformationCard.transform.gameObject:SetActive(false)
	end
end

function HandCard:AddListener()
	self.ui.btnList:AddListener()
	EventManager:AddListener(Global.Event.GameStage.DealCardsStart, function(data) self:OnDealCardsStart(data) end, "Lua.game.handCard.OnDealCardsStart")
	EventManager:AddListener(Global.Event.GameStage.GameComplete, function() self:OnGameComplete() end, "Lua.game.handCard.OnGameComplete")
	EventManager:AddListener(Global.Event.GameStage.GameTurnDisCardStart, function(data) self:OnGameTurnDisCardStart(data) end, "Lua.game.handCard.OnGameTurnDisCardStart")
	EventManager:AddListener(Global.Event.GameStage.GameTurnDisCardComplete, function() self:OnGameTurnDisCardComplete() end, "Lua.game.handCard.OnGameTurnDisCardComplete")
	EventManager:AddListener(Global.Event.InformationStage.InformationTransmitReady, function(data) self:OnInformationTransmitReady(data) end, "Lua.game.handCard.OnInformationTransmitReady")
	EventManager:AddListener(Global.Event.InformationStage.WaitEnd, function(data) self:OnInformationReceiveSuccess(data) end, "Lua.game.handCard.OnInformationReceiveSuccess")
	EventManager:AddListener(Global.Event.GameTurnOpertateEnd, function(data) self:OnGameTurnOpertateEnd(data) end, "Lua.game.handCard.OnGameTurnOpertateEnd")
end

function HandCard:RemoveListener()
	self.ui.btnList:RemoveListener()
	EventManager:RemoveListener(Global.Event.GameStage.DealCardsStart, "Lua.game.handCard.OnDealCardsStart")
	EventManager:RemoveListener(Global.Event.GameStage.GameComplete, "Lua.game.handCard.OnGameComplete")
	EventManager:RemoveListener(Global.Event.GameStage.GameTurnDisCardStart, "Lua.game.handCard.OnGameTurnDisCardStart")
	EventManager:RemoveListener(Global.Event.GameStage.GameTurnDisCardComplete, "Lua.game.handCard.OnGameTurnDisCardComplete")
	EventManager:RemoveListener(Global.Event.InformationStage.InformationTransmitReady, "Lua.game.handCard.OnInformationTransmitReady")
	EventManager:RemoveListener(Global.Event.InformationStage.WaitEnd, "Lua.game.handCard.OnInformationReceiveSuccess")
	EventManager:RemoveListener(Global.Event.GameTurnOpertateEnd, "Lua.game.handCard.OnGameTurnOpertateEnd")
end

function HandCard:Dispose()
	self.ui.btnList:Dispose()
	self.handCards = {}
	self.chooseCards = {}
end
