require "ui/login/userHead"

Chair = {}
Chair.__index = Chair

function Chair:New(gameObject)
	local item = {}
	item.gameObject = gameObject
	item.transform = gameObject.transform
	item.ui = {}

	setmetatable(item, Chair)
	return item
end

function Chair:InitUIReference()
	self.ui.ready = self.transform:Find("Ready")
	self.ui.owener = self.transform:Find("Owener")
	self.ui.gameTurn = {}
	self.ui.gameTurn.transform = self.transform:Find("GameTurn")
	self.ui.gameTurn.highLight = self.ui.gameTurn.transform:Find("HighLight")
	self.ui.character = {}
	self.ui.character.transform = self.transform:Find("User/Character")
	self.ui.character.btn = self.ui.character.transform:GetComponent(typeof(Button))
	self.ui.character.image = self.ui.character.transform:GetComponent(typeof(Image))
	self.ui.character.bigerBtn = self.ui.character.transform:Find("BigerBtn"):GetComponent(typeof(Button))
	self.ui.handCard = {}
	self.ui.handCard.transform = self.transform:Find("HandCardCount")
	self.ui.handCard.count = self.ui.handCard.transform:Find("Text"):GetComponent(typeof(Text))
	self.ui.informationDetail = {}
	self.ui.informationDetail.transform = self.transform:Find("InformationDetail")
	self.ui.informationDetail.redCount = self.ui.informationDetail.transform:Find("Red/Count"):GetComponent(typeof(Text))
	self.ui.informationDetail.blueCount = self.ui.informationDetail.transform:Find("Blue/Count"):GetComponent(typeof(Text))
	self.ui.informationDetail.grayCount = self.ui.informationDetail.transform:Find("Gray/Count"):GetComponent(typeof(Text))
	self.ui.informationDetail.redBlueCount = self.ui.informationDetail.transform:Find("RedBlue/Count"):GetComponent(typeof(Text))
	self.ui.statusTip = {}
	self.ui.statusTip.transform = self.transform:Find("StatusTip")
	self.ui.statusTip.task = self.ui.statusTip.transform:Find("Task")
	self.ui.statusTip.taskContent = self.ui.statusTip.transform:Find("Task/Text"):GetComponent(typeof(Text))
	self.ui.statusTip.lock = self.ui.statusTip.transform:Find("Lock")
	
	self.ui.head = UserHead:New(self.transform:Find("User").gameObject)
	self.ui.head:InitUIReference()
end

function Chair:InitUI()
	self.gameObject:SetActive(true)
	self.ui.ready.gameObject:SetActive(false)
	self.ui.owener.gameObject:SetActive(false)
	self.ui.gameTurn.transform.gameObject:SetActive(false)
	self.ui.character.bigerBtn.gameObject:SetActive(false)
	self.ui.handCard.transform.gameObject:SetActive(false)
	self.ui.informationDetail.transform.gameObject:SetActive(false)
	self.ui.statusTip.transform.gameObject:SetActive(true)
	self.ui.statusTip.task.gameObject:SetActive(false)
	self.ui.statusTip.lock.gameObject:SetActive(false)
	self.chooseCallback = {}
	self:ShowHead()
	self.ui.head:SetData("")
end

function Chair:SetChairInfo(chairInfo)
	self.chairInfo = chairInfo
	
	if chairInfo.isNull == false then
		self.ui.owener.gameObject:SetActive(chairInfo.chairNub == 1)
		self.ui.ready.gameObject:SetActive(chairInfo.chairNub ~= 1 and chairInfo.isReady == true)
		if chairInfo.userData == nil then
			self.ui.head:SetData("")
		else
			self.ui.head:SetData(chairInfo.userData.name)
		end
		
	else
		self:InitUI()
	end
	
end

function Chair:SetCharacter(character)
	self.ui.character.bigerBtn.gameObject:SetActive(true)
	self.character = character
	self.ui.character.image.sprite = ResourcesManager:LoadSprite(Global.Resources.Character[character])
end

function Chair:SetHandCardCount(count)
	if count == nil then
		self.ui.handCard.count.text = "0"
	else
		self.ui.handCard.count.text = tostring(count)
	end
end

function Chair:SetInformationCount(data)
	if data ~= nil then
		self.ui.informationDetail.redCount.text = tostring(data.redCount)
		self.ui.informationDetail.blueCount.text = tostring(data.blueCount)
		self.ui.informationDetail.grayCount.text = tostring(data.grayCount)
		self.ui.informationDetail.redBlueCount.text = tostring(data.redBlueCount)
	end
end

function Chair:HideStatus()
	self.ui.ready.gameObject:SetActive(false)
	self.ui.owener.gameObject:SetActive(false)
end

function Chair:ShowCharacter()
	self.ui.head:SetHeadActive(false)
	self.ui.character.transform.gameObject:SetActive(true)
	self.ui.handCard.transform.gameObject:SetActive(true)
	self.ui.informationDetail.transform.gameObject:SetActive(true)
	self.ui.character.image.sprite = ResourcesManager:LoadSprite(Global.Resources.Character[CharacterType.None])
	self.ui.character.bigerBtn.gameObject:SetActive(false)
end

function Chair:ShowHead()
	self.ui.head:SetHeadActive(true)
	self.ui.character.transform.gameObject:SetActive(false)
	self.ui.handCard.transform.gameObject:SetActive(false)
	self.ui.informationDetail.transform.gameObject:SetActive(false)
end

function Chair:GetUserData()
	if self.chairInfo == nil then
		return nil
	else
		return self.chairInfo.userData
	end
end

function Chair:GetCharacterPos()
	return self.ui.character.transform.position
end

function Chair:SetGameTurn(b)
	self.ui.gameTurn.transform.gameObject:SetActive(b)
end

function Chair:SetGameTurnText(tips)
	if tips == nil then
		self.ui.statusTip.task.gameObject:SetActive(false)
	else
		self.ui.statusTip.task.gameObject:SetActive(true)
		self.ui.statusTip.taskContent.text = tips
	end
end

function Chair:SetLock(b)
	self.ui.statusTip.lock.gameObject:SetActive(b)
end

function Chair:IsOwner()
	if self.chairInfo == nil then
		return false
	end
	
	if self.chairInfo.isNull == true then
		return false
	end
	
	return self.chairInfo.chairNub == 1
end

function Chair:IsReady()
	if self.chairInfo == nil then
		return false
	end

	if self.chairInfo.isNull == true then
		return false
	end
	
	return self.chairInfo.isReady
end

function Chair:OnBtnCharacter()
	if self.chooseCallback.ZhiDa ~= nil then
		self.chooseCallback.ZhiDa()
	elseif self.chooseCallback.SuoDing ~= nil then
		self.chooseCallback.SuoDing()
	end
	
end

function Chair:OnBtnCharacterBiger()
	local data = {}
	data.path = Global.Resources.Character[self.character]
	EventManager:TriggerEvent(Global.Event.DetailCard, data)
end

function Chair:AddUIEvent()
	self.ui.head:AddUIEvent()
	UIEventManager:AddListener(self.ui.character.btn, self.OnBtnCharacter, self, "lua.game.chair.OnBtnCharacter")
	UIEventManager:AddListener(self.ui.character.bigerBtn, self.OnBtnCharacterBiger, self, "lua.game.chair.OnBtnCharacterBiger")
end

function Chair:RemoveUIEvent()
	self.ui.head:RemoveUIEvent()
	UIEventManager:RemoveAllListeners(self.ui.character.btn)
	UIEventManager:RemoveAllListeners(self.ui.character.bigerBtn)
end

function Chair:OnReceiveGameStart()
	self.ui.ready.gameObject:SetActive(false)
	self.ui.owener.gameObject:SetActive(false)
end

function Chair:OnZhiDaChoose()
	self.chooseCallback.ZhiDa = function()
		local userName = nil
		if self:GetUserData() ~= nil then
			userName = self:GetUserData().name
		else
			userName = ""
		end
		if userName == Global.Data.User.UserName then
			Global.Methods.ShowTips2("情报不能以自己为目标")
		else
			Global.Methods.ShowTips("情报将传递给"..userName, function()
				EventManager:TriggerEvent(Global.Event.InformationStage.ZhiDaChooseComplete, userName)
			end)
		end
	end
end

function Chair:OnZhiDaChooseComplete()
	self.chooseCallback.ZhiDa = nil
end

function Chair:OnSuoDingChoose()
	self.chooseCallback.SuoDing = function()
		local userName = nil
		if self:GetUserData() ~= nil then
			userName = self:GetUserData().name
		else
			userName = ""
		end
		if userName == Global.Data.User.UserName then
			Global.Methods.ShowTips2("锁定不能以自己为目标")
		else
			Global.Methods.ShowTips("锁定玩家"..userName, function()
					EventManager:TriggerEvent(Global.Event.Card.SuoDingChooseComplete, userName)
				end)
		end
	end
end

function Chair:OnSuoDingChooseComplete()
	self.chooseCallback.SuoDing = nil
end

function Chair:AddListener()
	self.ui.head:AddListener()
	EventManager:AddListener(Global.Event.InformationStage.ZhiDaChoose, function() self:OnZhiDaChoose() end, "Lua.game.chair.OnZhiDaChoose")
	EventManager:AddListener(Global.Event.InformationStage.ZhiDaChooseComplete, function() self:OnZhiDaChooseComplete() end, "Lua.game.chair.OnZhiDaChooseComplete")
	EventManager:AddListener(Global.Event.Card.SuoDingChoose, function() self:OnSuoDingChoose() end, "Lua.game.chair.OnSuoDingChoose")
	EventManager:AddListener(Global.Event.Card.SuoDingChooseComplete, function() self:OnSuoDingChooseComplete() end, "Lua.game.chair.OnSuoDingChooseComplete")
end

function Chair:RemoveListener()
	self.ui.head:RemoveListener()
	EventManager:RemoveListener(Global.Event.InformationStage.ZhiDaChoose, "Lua.game.chair.OnZhiDaChoose")
	EventManager:RemoveListener(Global.Event.InformationStage.ZhiDaChooseComplete, "Lua.game.chair.OnZhiDaChooseComplete")
	EventManager:RemoveListener(Global.Event.Card.SuoDingChoose, "Lua.game.chair.OnSuoDingChoose")
	EventManager:RemoveListener(Global.Event.Card.SuoDingChooseComplete, "Lua.game.chair.OnSuoDingChooseComplete")
end

function Chair:Dispose()
	if self.ui.head ~= nil then
		self.ui.head:Dispose()
	end
	self.chooseCallback = nil
end