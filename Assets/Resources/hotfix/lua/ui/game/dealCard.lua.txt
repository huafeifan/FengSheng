DealCard = {}
DealCard.__index = DealCard

function DealCard:New(gameObject)
	local item = {}
	item.gameObject = gameObject
	item.transform = gameObject.transform
	item.ui = {}

	setmetatable(item, DealCard)
	return item
end

function DealCard:InitUIReference()
	self.ui.cardPool = self.transform:GetComponent(typeof(GameObjectPool))
	self.ui.remainCardCount = self.transform:Find("RemainCount"):GetComponent(typeof(Text))
	self.ui.disCardCount = self.transform:Find("DisCardCount"):GetComponent(typeof(Text))
end

function DealCard:InitUI()
	self.ui.cardPool:Dispose()
	self.ui.cardPool.gameObject:SetActive(false)
	self.ui.remainCardCount.text = ""
	self.ui.disCardCount.text = ""
	self.list = Queue:new()
	self.isDealing = false
end

function DealCard:AddDealCard(targetPos, path, onComplete)
	local data = {}
	data.targetPos = targetPos
	data.path = path
	data.onComplete = onComplete
	self.list:enqueue(data)
	
	if self.isDealing == false then
		self.isDealing = true
		local dealData = self.list:dequeue()
		self:DealOneCard(dealData.targetPos, dealData.path, dealData.onComplete)
	end
end

function DealCard:DealOneCard(targetPos, path, onComplete)
	local card = self.ui.cardPool:Get(true)
	card.transform.localPosition = Vector3.zero
	local image = card:GetComponent(typeof(Image))
	image.sprite = ResourcesManager:LoadSprite(Global.Resources.Card.None)
	
	--method
	local Step1, Step2, Step3 = nil, nil, nil
	Step1 = function()
		if path == nil then
			if self.list:isEmpty() == false then
				self.ui.cardPool:Dispose(card)
				local dealData = self.list:dequeue()
				self:DealOneCard(dealData.targetPos, dealData.path, dealData.onComplete)
			else
				self.isDealing = false
				self.ui.cardPool:Dispose(card)
				EventManager:TriggerEvent(Global.Event.GameStage.DealCardsComplete, nil)
			end
		else
			card.transform:DOLocalRotate(Vector3(0, 90, 0), 0.2):SetEase(Ease.Linear):OnComplete(Step2)
		end
	end
	Step2 = function()
		image.sprite = ResourcesManager:LoadSprite(Global.Resources.Card[path])
		card.transform:DOLocalRotate(Vector3.zero, 0.2):SetEase(Ease.Linear):OnComplete(Step3)
	end
	Step3 = function()
		onComplete()
		if self.list:isEmpty() == false then
			self.ui.cardPool:Dispose(card)
			local dealData = self.list:dequeue()
			self:DealOneCard(dealData.targetPos, dealData.path, dealData.onComplete)
		else
			self.isDealing = false
			self.ui.cardPool:Dispose(card)
			EventManager:TriggerEvent(Global.Event.GameStage.DealCardsComplete, nil)
		end
	end
	--method
	
	card.transform:DOMove(targetPos, 0.3):OnComplete(Step1)
end

function DealCard:DisOneCard(startPos, path, delay, onComplete)
	local card = self.ui.cardPool:Get(true)
	local image = card:GetComponent(typeof(Image))
	image.sprite = ResourcesManager:LoadSprite(path)
	
	card.transform.position = startPos
	card.transform:DOMove(self.ui.cardPool.transform.position, 0.2):SetDelay(delay):OnComplete(function()
		if onComplete ~= nil then
			onComplete()
		end
		self.ui.cardPool:Dispose(card)
	end)
end

function DealCard:AddUIEvent()
	
end

function DealCard:RemoveUIEvent()
	
end

function DealCard:OnGameStart(data)
	self.ui.cardPool.gameObject:SetActive(true)
	self.remainGameCardCount = data.gameCardCount
	self:SetRemainGameCardCount()
	self:SetDisCardCount()
end

function DealCard:OnGameComplete()
	self.ui.cardPool:Dispose()
	self.ui.cardPool.gameObject:SetActive(false)
	self.ui.remainCardCount.text = ""
	self.ui.disCardCount.text = ""
	self.list = Queue:Clear()
	self.isDealing = false
end

function DealCard:SetRemainGameCardCount()
	if self.remainGameCardCount == nil then
		self.ui.remainCardCount.text = ""
	else
		self.ui.remainCardCount.text = tostring(self.remainGameCardCount)
	end
end

function DealCard:SetDisCardCount()
	if self.disCardCount == nil then
		self.ui.disCardCount.text = "0"
	else
		self.ui.disCardCount.text = tostring(self.disCardCount)
	end
end

function DealCard:OnDealCardsStart(data)
	self.remainGameCardCount = data.remainGameCardCount
	self:SetRemainGameCardCount()
	self.disCardCount = data.disCardCount
	self:SetDisCardCount()
end

function DealCard:OnGameTurnDisCardStart(data)
	self.disCardCount = data.disCardCount
	self:SetDisCardCount()
end

function DealCard:OnPlayHandCard(data)
	if self.disCardCount == nil then return end
	self.disCardCount = self.disCardCount + 1
	self:SetDisCardCount()
end

function DealCard:AddListener()                              
	EventManager:AddListener(Global.Event.GameStage.GameStart, function(data) self:OnGameStart(data) end, "Lua.game.dealCard.OnGameStart")
	EventManager:AddListener(Global.Event.GameStage.GameComplete, function() self:OnGameComplete() end, "Lua.game.dealCard.OnGameComplete")
	EventManager:AddListener(Global.Event.GameStage.DealCardsStart, function(data) self:OnDealCardsStart(data) end, "Lua.game.dealCard.OnDealCardsStart")
	EventManager:AddListener(Global.Event.GameStage.GameTurnDisCardStart, function(data) self:OnGameTurnDisCardStart(data) end, "Lua.game.dealCard.OnGameTurnDisCardStart")
	EventManager:AddListener(Global.Event.InformationStage.PlayHandCard, function(data) self:OnPlayHandCard(data) end, "Lua.game.dealCard.OnPlayHandCard")
end

function DealCard:RemoveListener()
	EventManager:RemoveListener(Global.Event.GameStage.GameStart, "Lua.game.dealCard.OnGameStart")
	EventManager:RemoveListener(Global.Event.GameStage.GameComplete, "Lua.game.dealCard.OnGameComplete")
	EventManager:RemoveListener(Global.Event.GameStage.DealCardsStart, "Lua.game.dealCard.OnDealCardsStart")
	EventManager:RemoveListener(Global.Event.GameStage.GameTurnDisCardStart, "Lua.game.dealCard.OnGameTurnDisCardStart")
	EventManager:RemoveListener(Global.Event.InformationStage.PlayHandCard, "Lua.game.dealCard.OnPlayHandCard")
end

function DealCard:Dispose()
	self.ui.cardPool:Dispose()
end
