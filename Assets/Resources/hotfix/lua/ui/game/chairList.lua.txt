require "ui/game/chair"

ChairList = {}
ChairList.__index = ChairList

local me = 1

function ChairList:New(gameObject, dealCard, informationCard)
	local item = {}
	item.gameObject = gameObject
	item.transform = gameObject.transform
	item.ui = {}
	item.chairs = {}
	item.dealCard = dealCard
	item.informationCard = informationCard

	setmetatable(item, ChairList)
	return item
end

function ChairList:InitUIReference()
	self.ui.top1 = Chair:New(self.transform:Find("TopChairs/Chair1").gameObject)
	self.ui.top1:InitUIReference()

	self.ui.top2 = Chair:New(self.transform:Find("TopChairs/Chair2").gameObject)
	self.ui.top2:InitUIReference()

	self.ui.top3 = Chair:New(self.transform:Find("TopChairs/Chair3").gameObject)
	self.ui.top3:InitUIReference()

	self.ui.left = Chair:New(self.transform:Find("LeftChairs/Chair").gameObject)
	self.ui.left:InitUIReference()

	self.ui.right = Chair:New(self.transform:Find("RightChairs/Chair").gameObject)
	self.ui.right:InitUIReference()

	self.ui.bottom = Chair:New(self.transform:Find("BottomChairs/Chair").gameObject)
	self.ui.bottom:InitUIReference()
end

function ChairList:InitUI()
	self.chairs = {}

	--自己
	self.chairs[me] = self.ui.bottom
	self.chairs[me]:InitUI()

	--6人桌
	if Global.Data.RoomInfo.ChairCount == 6 then
		self.chairs[2] = self.ui.left
		self.chairs[2]:InitUI()

		self.chairs[3] = self.ui.top1
		self.chairs[3]:InitUI()

		self.chairs[4] = self.ui.top2
		self.chairs[4]:InitUI()

		self.chairs[5] = self.ui.top3
		self.chairs[5]:InitUI()

		self.chairs[6] = self.ui.right
		self.chairs[6]:InitUI()
		--5人桌
	elseif Global.Data.RoomInfo.ChairCount == 5 then
		self.chairs[2] = self.ui.left
		self.chairs[2]:InitUI()

		self.chairs[3] = self.ui.top1
		self.chairs[3]:InitUI()

		self.chairs[4] = self.ui.top2
		self.chairs[4]:InitUI()

		self.chairs[5] = self.ui.right
		self.chairs[5]:InitUI()

		self.ui.top3.gameObject:SetActive(false)
		--4人桌
	elseif Global.Data.RoomInfo.ChairCount == 4 then
		self.chairs[2] = self.ui.left
		self.chairs[2]:InitUI()

		self.chairs[3] = self.ui.top1
		self.chairs[3]:InitUI()

		self.chairs[4] = self.ui.right
		self.chairs[4]:InitUI()

		self.ui.top2.gameObject:SetActive(false)
		self.ui.top3.gameObject:SetActive(false)
		--3人桌
	else
		self.chairs[2] = self.ui.left
		self.chairs[2]:InitUI()

		self.chairs[3] = self.ui.right
		self.chairs[3]:InitUI()

		self.ui.top1.gameObject:SetActive(false)
		self.ui.top2.gameObject:SetActive(false)
		self.ui.top3.gameObject:SetActive(false)
	end
end

function ChairList:RefreshRoomInfo()
	--服务端传来的座位信息
	local chairsInfo = Global.Data.RoomInfo.ChairsInfo
	--座位信息数量
	local chairInfoCount = #chairsInfo
	--座位数量
	local chairCount = #self.chairs

	--房主是1号座椅,找出自己是几号座椅
	local index = 1
	for i = 1, chairInfoCount do
		if chairsInfo[i].isNull == false and chairsInfo[i].userData.name == Global.Data.User.UserName then
			break
		end
		index = index + 1
	end

	--开始排座,从自己开始排
	for j = 1, chairCount do
		if index > chairInfoCount then
			index = 1
		end
		self.chairs[j]:SetChairInfo(chairsInfo[index])
		index = index + 1
	end

end

function ChairList:GetMyChair()
	return self.chairs[me]
end

function ChairList:AddUIEvent()
	for i = 1, #self.chairs do
		self.chairs[i]:AddUIEvent()
	end
end

function ChairList:RemoveUIEvent()
	for i = 1, #self.chairs do
		self.chairs[i]:RemoveUIEvent()
	end
end

function ChairList:OnGameStart()
	for i = 1, #self.chairs do
		self.chairs[i]:HideStatus()
		self.chairs[i]:ShowCharacter()
	end
end

function ChairList:OnGameComplete()
	for i = 1, #self.chairs do
		self.chairs[i]:ShowHead()
		self.chairs[i]:SetGameTurnText("")
	end
end

function ChairList:OnCharacterChooseComplete(data)
	if data.userName == Global.Data.User.UserName then
		self.chairs[me]:SetCharacter(data.character)
	end
end

function ChairList:OnDealCardsStart(data)
	for i = 1, #data.dealCards do
		local dealCards = data.dealCards[i]
		for j = 2, #self.chairs do
			local userData = self.chairs[j]:GetUserData()
			if userData ~= nil and userData.name == dealCards.userName then
				for k = 1, #dealCards.cards do
					self.dealCard:AddDealCard(self.chairs[j]:GetCharacterPos(), nil, nil)
				end
				self.chairs[j]:SetHandCardCount()
			end
		end
	end
end

function ChairList:OnGameTurn(data)
	for i = 1, #self.chairs do
		local userData = self.chairs[i]:GetUserData()
		if userData ~= nil and userData.name == data.userName then
			self.chairs[i]:SetGameTurn(true)
		else
			self.chairs[i]:SetGameTurn(false)
		end
	end
end

function ChairList:OnWaitGameTurnStart()
	for i = 1, #self.chairs do
		local userData = self.chairs[i]:GetUserData()
		if userData ~= nil and userData.name == Global.Data.RoomInfo.CurrentGameTurnUserName then
			self.chairs[i]:SetGameTurnText("等待回合开始")
		end
	end
end

function ChairList:OnWaitGameTurnDealCards()
	for i = 1, #self.chairs do
		local userData = self.chairs[i]:GetUserData()
		if userData ~= nil and userData.name == Global.Data.RoomInfo.CurrentGameTurnUserName then
			self.chairs[i]:SetGameTurnText("抽牌中...")
		end
	end
end

function ChairList:OnWaitGameTurnOpertateEnd()
	for i = 1, #self.chairs do
		local userData = self.chairs[i]:GetUserData()
		if userData ~= nil and userData.name == Global.Data.RoomInfo.CurrentGameTurnUserName then
			self.chairs[i]:SetGameTurnText("回合中...")
		end
	end
end

function ChairList:OnWaitGameTurnDisCard()
	for i = 1, #self.chairs do
		local userData = self.chairs[i]:GetUserData()
		if userData ~= nil and userData.name == Global.Data.RoomInfo.CurrentGameTurnUserName then
			self.chairs[i]:SetGameTurnText("弃牌中...")
		end
	end
end

function ChairList:OnWaitGameTurnEnd()
	for i = 1, #self.chairs do
		local userData = self.chairs[i]:GetUserData()
		if userData ~= nil and userData.name == Global.Data.RoomInfo.CurrentGameTurnUserName then
			self.chairs[i]:SetGameTurnText("等待玩家结束回合")
		end
	end
end

function ChairList:OnGameTurnDisCardStart(data)
	if #data.cards > 0 then
		for i = 2, #self.chairs do
			local userData = self.chairs[i]:GetUserData()
			if userData ~= nil and userData.name == data.userName then
				local delay = 0
				for j = 1, #data.cards do
					local startPos = self.chairs[i]:GetCharacterPos()
					self.dealCard:DisOneCard(startPos, Global.Resources.Card.None, delay, nil)
					delay = delay + 0.2
				end
			end
		end
	end
end

function ChairList:OnReceiveHandCardCount(data)
	for i = 2, #self.chairs do
		local userData = self.chairs[i]:GetUserData()
		if userData ~= nil and userData.name == data.userName then
			self.chairs[i]:SetHandCardCount(data.count)
			break
		end
	end
end

function ChairList:OnInformationTransmitReady(data)
	for i = 2, #self.chairs do
		local userData = self.chairs[i]:GetUserData()
		if userData ~= nil and userData.name == data.fromUserName then
			local startPos = self.chairs[i]:GetCharacterPos()
			self.informationCard:InformationDeclarationStart(startPos, data, false, nil)
			break
		end
	end
end

function ChairList:OnWaitInformationReceive()
	for i = 1, #self.chairs do
		local userData = self.chairs[i]:GetUserData()
		if userData ~= nil then
			local isHisGameTurn = userData.name == Global.Data.RoomInfo.CurrentGameTurnUserName
			local isHisAskReceive = userData.name == Global.Data.RoomInfo.CurrentAskInformationReceivedPlayerName
			if isHisAskReceive or isHisGameTurn then
				self.chairs[i]:SetGameTurn(true)
			else
				self.chairs[i]:SetGameTurn(false)
			end
		else
			self.chairs[i]:SetGameTurn(false)
		end
	end
end

function ChairList:OnInformationReceiveSuccess(data)
	for i = 1, #self.chairs do
		local userData = self.chairs[i]:GetUserData()
		if userData ~= nil and userData.name == data.userName then
			local tagetPos = self.chairs[i]:GetCharacterPos()
			self.informationCard:InformationReceiveSuccessAnimation(tagetPos)
			local isHisGameTurn = userData.name == Global.Data.RoomInfo.CurrentGameTurnUserName
			if isHisGameTurn then
				self.chairs[i]:SetGameTurn(true)
			else
				self.chairs[i]:SetGameTurn(false)
			end
		end
	end
end

function ChairList:OnReceiveInformationCount(data)
	for i = 1, #data.infos do
		for j = 1, #self.chairs do
			local userData = self.chairs[j]:GetUserData()
			if userData ~= nil and userData.name == data.infos[i].userName then
				self.chairs[j]:SetInformationCount(data.infos[i])
			end
		end
	end
end

function ChairList:AddListener()
	for i = 1, #self.chairs do
		self.chairs[i]:AddListener()
	end
	EventManager:AddListener(Global.Event.GameStage.GameStart, function() self:OnGameStart() end, "Lua.game.chairList.OnGameStart")
	EventManager:AddListener(Global.Event.GameStage.GameComplete, function() self:OnGameComplete() end, "Lua.game.chairList.OnGameComplete")
	EventManager:AddListener(Global.Event.GameStage.CharacterChooseComplete, function(data) self:OnCharacterChooseComplete(data) end, "Lua.game.chairList.OnCharacterChooseComplete")
	EventManager:AddListener(Global.Event.GameStage.DealCardsStart, function(data) self:OnDealCardsStart(data) end, "Lua.game.chairList.OnDealCardsStart")
	EventManager:AddListener(Global.Event.GameStage.GameTurn, function(data) self:OnGameTurn(data) end, "Lua.game.chairList.OnGameTurn")
	EventManager:AddListener(Global.Event.GameStage.WaitGameTurnStart, function() self:OnWaitGameTurnStart() end, "Lua.game.chairList.OnWaitGameTurnStart")
	EventManager:AddListener(Global.Event.GameStage.WaitGameTurnDealCards, function() self:OnWaitGameTurnDealCards() end, "Lua.game.chairList.OnWaitGameTurnDealCards")
	EventManager:AddListener(Global.Event.GameStage.WaitGameTurnOpertateEnd, function() self:OnWaitGameTurnOpertateEnd() end, "Lua.game.chairList.OnWaitGameTurnOpertateEnd")
	EventManager:AddListener(Global.Event.GameStage.WaitGameTurnDisCard, function() self:OnWaitGameTurnDisCard() end, "Lua.game.chairList.OnWaitGameTurnDisCard")
	EventManager:AddListener(Global.Event.GameStage.WaitGameTurnEnd, function() self:OnWaitGameTurnEnd() end, "Lua.game.chairList.OnWaitGameTurnEnd")
	EventManager:AddListener(Global.Event.GameStage.GameTurnDisCardStart, function(data) self:OnGameTurnDisCardStart(data) end, "Lua.game.chairList.OnGameTurnDisCardStart")
	EventManager:AddListener(Global.Event.ReceiveHandCardCount, function(data) self:OnReceiveHandCardCount(data) end, "Lua.game.chairList.OnReceiveHandCardCount")
	EventManager:AddListener(Global.Event.InformationStage.InformationTransmitReady, function(data) self:OnInformationTransmitReady(data) end, "Lua.game.chairList.OnInformationTransmitReady")
	EventManager:AddListener(Global.Event.InformationStage.WaitInformationReceive, function() self:OnWaitInformationReceive() end, "Lua.game.chairList.OnWaitInformationReceive")
	EventManager:AddListener(Global.Event.InformationStage.WaitEnd, function(data) self:OnInformationReceiveSuccess(data) end, "Lua.game.chairList.OnInformationReceiveSuccess")
	EventManager:AddListener(Global.Event.ReceiveInformationCount, function(data) self:OnReceiveInformationCount(data) end, "Lua.game.chairList.OnReceiveInformationCount")
end

function ChairList:RemoveListener()
	for i = 1, #self.chairs do
		self.chairs[i]:RemoveListener()
	end
	EventManager:RemoveListener(Global.Event.GameStage.GameStart, "Lua.game.chairList.OnGameStart")
	EventManager:RemoveListener(Global.Event.GameStage.GameComplete, "Lua.game.chairList.OnGameComplete")
	EventManager:RemoveListener(Global.Event.GameStage.CharacterChooseComplete, "Lua.game.chairList.OnCharacterChooseComplete")
	EventManager:RemoveListener(Global.Event.GameStage.DealCardsStart, "Lua.game.chairList.OnDealCardsStart")
	EventManager:RemoveListener(Global.Event.GameStage.GameTurn, "Lua.game.chairList.OnGameTurn")
	EventManager:RemoveListener(Global.Event.GameStage.WaitGameTurnStart, "Lua.game.chairList.OnWaitGameTurnStart")
	EventManager:RemoveListener(Global.Event.GameStage.WaitGameTurnDealCards, "Lua.game.chairList.OnWaitGameTurnDealCards")
	EventManager:RemoveListener(Global.Event.GameStage.WaitGameTurnOpertateEnd, "Lua.game.chairList.OnWaitGameTurnOpertateEnd")
	EventManager:RemoveListener(Global.Event.GameStage.WaitGameTurnDisCard, "Lua.game.chairList.OnWaitGameTurnDisCard")
	EventManager:RemoveListener(Global.Event.GameStage.WaitGameTurnEnd, "Lua.game.chairList.OnWaitGameTurnEnd")
	EventManager:RemoveListener(Global.Event.GameStage.GameTurnDisCardStart, "Lua.game.chairList.OnGameTurnDisCardStart")
	EventManager:RemoveListener(Global.Event.ReceiveHandCardCount, "Lua.game.chairList.OnReceiveHandCardCount")
	EventManager:RemoveListener(Global.Event.InformationStage.InformationTransmitReady, "Lua.game.chairList.OnInformationTransmitReady")
	EventManager:RemoveListener(Global.Event.InformationStage.WaitInformationReceive, "Lua.game.chairList.OnWaitInformationReceive")
	EventManager:RemoveListener(Global.Event.InformationStage.WaitEnd, "Lua.game.chairList.OnInformationReceiveSuccess")
	EventManager:RemoveListener(Global.Event.ReceiveInformationCount, "Lua.game.chairList.OnReceiveInformationCount")
end

function ChairList:Dispose()
	
end